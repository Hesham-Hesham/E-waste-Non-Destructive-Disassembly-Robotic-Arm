// Generated by gencpp from file CentralNode/ScrewListResponse.msg
// DO NOT EDIT!


#ifndef CENTRALNODE_MESSAGE_SCREWLISTRESPONSE_H
#define CENTRALNODE_MESSAGE_SCREWLISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace CentralNode
{
template <class ContainerAllocator>
struct ScrewListResponse_
{
  typedef ScrewListResponse_<ContainerAllocator> Type;

  ScrewListResponse_()
    : screwList()  {
    }
  ScrewListResponse_(const ContainerAllocator& _alloc)
    : screwList(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _screwList_type;
  _screwList_type screwList;





  typedef boost::shared_ptr< ::CentralNode::ScrewListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CentralNode::ScrewListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ScrewListResponse_

typedef ::CentralNode::ScrewListResponse_<std::allocator<void> > ScrewListResponse;

typedef boost::shared_ptr< ::CentralNode::ScrewListResponse > ScrewListResponsePtr;
typedef boost::shared_ptr< ::CentralNode::ScrewListResponse const> ScrewListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::CentralNode::ScrewListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::CentralNode::ScrewListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::CentralNode::ScrewListResponse_<ContainerAllocator1> & lhs, const ::CentralNode::ScrewListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.screwList == rhs.screwList;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::CentralNode::ScrewListResponse_<ContainerAllocator1> & lhs, const ::CentralNode::ScrewListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace CentralNode

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::CentralNode::ScrewListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::CentralNode::ScrewListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::CentralNode::ScrewListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f6d262f128183ca8a94edda08422d99";
  }

  static const char* value(const ::CentralNode::ScrewListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f6d262f128183caULL;
  static const uint64_t static_value2 = 0x8a94edda08422d99ULL;
};

template<class ContainerAllocator>
struct DataType< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CentralNode/ScrewListResponse";
  }

  static const char* value(const ::CentralNode::ScrewListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] screwList\n"
;
  }

  static const char* value(const ::CentralNode::ScrewListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.screwList);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ScrewListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CentralNode::ScrewListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::CentralNode::ScrewListResponse_<ContainerAllocator>& v)
  {
    s << indent << "screwList[]" << std::endl;
    for (size_t i = 0; i < v.screwList.size(); ++i)
    {
      s << indent << "  screwList[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.screwList[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTRALNODE_MESSAGE_SCREWLISTRESPONSE_H
