// Generated by gencpp from file CentralNode/SchedularResponse.msg
// DO NOT EDIT!


#ifndef CENTRALNODE_MESSAGE_SCHEDULARRESPONSE_H
#define CENTRALNODE_MESSAGE_SCHEDULARRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace CentralNode
{
template <class ContainerAllocator>
struct SchedularResponse_
{
  typedef SchedularResponse_<ContainerAllocator> Type;

  SchedularResponse_()
    : waypoints()
    , waypoint_types()  {
    }
  SchedularResponse_(const ContainerAllocator& _alloc)
    : waypoints(_alloc)
    , waypoint_types(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _waypoints_type;
  _waypoints_type waypoints;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _waypoint_types_type;
  _waypoint_types_type waypoint_types;





  typedef boost::shared_ptr< ::CentralNode::SchedularResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CentralNode::SchedularResponse_<ContainerAllocator> const> ConstPtr;

}; // struct SchedularResponse_

typedef ::CentralNode::SchedularResponse_<std::allocator<void> > SchedularResponse;

typedef boost::shared_ptr< ::CentralNode::SchedularResponse > SchedularResponsePtr;
typedef boost::shared_ptr< ::CentralNode::SchedularResponse const> SchedularResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::CentralNode::SchedularResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::CentralNode::SchedularResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::CentralNode::SchedularResponse_<ContainerAllocator1> & lhs, const ::CentralNode::SchedularResponse_<ContainerAllocator2> & rhs)
{
  return lhs.waypoints == rhs.waypoints &&
    lhs.waypoint_types == rhs.waypoint_types;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::CentralNode::SchedularResponse_<ContainerAllocator1> & lhs, const ::CentralNode::SchedularResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace CentralNode

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::CentralNode::SchedularResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::CentralNode::SchedularResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::CentralNode::SchedularResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::CentralNode::SchedularResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::CentralNode::SchedularResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::CentralNode::SchedularResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::CentralNode::SchedularResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab7b1b43f5a75abfd5d43934103bc4a6";
  }

  static const char* value(const ::CentralNode::SchedularResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab7b1b43f5a75abfULL;
  static const uint64_t static_value2 = 0xd5d43934103bc4a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::CentralNode::SchedularResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CentralNode/SchedularResponse";
  }

  static const char* value(const ::CentralNode::SchedularResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::CentralNode::SchedularResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] waypoints \n"
"int32[] waypoint_types\n"
;
  }

  static const char* value(const ::CentralNode::SchedularResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::CentralNode::SchedularResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.waypoints);
      stream.next(m.waypoint_types);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SchedularResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CentralNode::SchedularResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::CentralNode::SchedularResponse_<ContainerAllocator>& v)
  {
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoints[i]);
    }
    s << indent << "waypoint_types[]" << std::endl;
    for (size_t i = 0; i < v.waypoint_types.size(); ++i)
    {
      s << indent << "  waypoint_types[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.waypoint_types[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTRALNODE_MESSAGE_SCHEDULARRESPONSE_H
