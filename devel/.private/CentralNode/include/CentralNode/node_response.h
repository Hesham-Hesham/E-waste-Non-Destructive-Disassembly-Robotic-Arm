// Generated by gencpp from file CentralNode/node_response.msg
// DO NOT EDIT!


#ifndef CENTRALNODE_MESSAGE_NODE_RESPONSE_H
#define CENTRALNODE_MESSAGE_NODE_RESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace CentralNode
{
template <class ContainerAllocator>
struct node_response_
{
  typedef node_response_<ContainerAllocator> Type;

  node_response_()
    : nodeId(0)
    , extraMessage()
    , status(0)  {
    }
  node_response_(const ContainerAllocator& _alloc)
    : nodeId(0)
    , extraMessage(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef int32_t _nodeId_type;
  _nodeId_type nodeId;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _extraMessage_type;
  _extraMessage_type extraMessage;

   typedef uint8_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::CentralNode::node_response_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::CentralNode::node_response_<ContainerAllocator> const> ConstPtr;

}; // struct node_response_

typedef ::CentralNode::node_response_<std::allocator<void> > node_response;

typedef boost::shared_ptr< ::CentralNode::node_response > node_responsePtr;
typedef boost::shared_ptr< ::CentralNode::node_response const> node_responseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::CentralNode::node_response_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::CentralNode::node_response_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::CentralNode::node_response_<ContainerAllocator1> & lhs, const ::CentralNode::node_response_<ContainerAllocator2> & rhs)
{
  return lhs.nodeId == rhs.nodeId &&
    lhs.extraMessage == rhs.extraMessage &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::CentralNode::node_response_<ContainerAllocator1> & lhs, const ::CentralNode::node_response_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace CentralNode

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::CentralNode::node_response_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::CentralNode::node_response_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::CentralNode::node_response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::CentralNode::node_response_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::CentralNode::node_response_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::CentralNode::node_response_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::CentralNode::node_response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b888e972b0112a456a30ae15a1f395cd";
  }

  static const char* value(const ::CentralNode::node_response_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb888e972b0112a45ULL;
  static const uint64_t static_value2 = 0x6a30ae15a1f395cdULL;
};

template<class ContainerAllocator>
struct DataType< ::CentralNode::node_response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "CentralNode/node_response";
  }

  static const char* value(const ::CentralNode::node_response_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::CentralNode::node_response_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 nodeId\n"
"string extraMessage\n"
"uint8 status\n"
;
  }

  static const char* value(const ::CentralNode::node_response_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::CentralNode::node_response_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.nodeId);
      stream.next(m.extraMessage);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct node_response_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::CentralNode::node_response_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::CentralNode::node_response_<ContainerAllocator>& v)
  {
    s << indent << "nodeId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.nodeId);
    s << indent << "extraMessage: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.extraMessage);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CENTRALNODE_MESSAGE_NODE_RESPONSE_H
